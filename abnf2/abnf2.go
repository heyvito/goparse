// This file was autogenerated by goparse. DO NOT EDIT.

package abnf2

import p "github.com/heyvito/goparse/parser"

var parser = map[string]p.Consumer{
	"rulelist":      p.Plus(p.Alt(p.Ref("rule"), p.Cat(p.Star(p.Ref("c-wsp")), p.Ref("c-nl")))),
	"rule":          p.Cat(p.Ref("rulename"), p.Ref("defined-as"), p.Ref("elements"), p.Ref("c-nl")),
	"rulename":      p.Cat(p.ALPHA, p.Star(p.Alt(p.ALPHA, p.DIGIT, p.Lit('-')))),
	"defined-as":    p.Cat(p.Star(p.Ref("c-wsp")), p.Alt(p.Lit('='), p.Cat(p.Lit('='), p.Lit('/'))), p.Star(p.Ref("c-wsp"))),
	"elements":      p.Cat(p.Ref("alternation"), p.Star(p.Ref("c-wsp"))),
	"c-wsp":         p.Alt(p.WSP, p.Cat(p.Ref("c-nl"), p.WSP)),
	"c-nl":          p.Alt(p.Ref("comment"), p.CRLF),
	"comment":       p.Cat(p.Lit(';'), p.Star(p.Alt(p.WSP, p.VCHAR)), p.CRLF),
	"alternation":   p.Cat(p.Ref("concatenation"), p.Star(p.Cat(p.Star(p.Ref("c-wsp")), p.Lit('/'), p.Star(p.Ref("c-wsp")), p.Ref("concatenation")))),
	"concatenation": p.Cat(p.Ref("repetition"), p.Star(p.Cat(p.Plus(p.Ref("c-wsp")), p.Ref("repetition")))),
	"repetition":    p.Cat(p.Opt(p.Ref("repeat")), p.Ref("element")),
	"repeat":        p.Alt(p.Plus(p.DIGIT), p.Cat(p.Star(p.DIGIT), p.Lit('*'), p.Star(p.DIGIT))),
	"element":       p.Alt(p.Ref("rulename"), p.Ref("group"), p.Ref("option"), p.Ref("char-val"), p.Ref("num-val"), p.Ref("prose-val")),
	"group":         p.Cat(p.Lit('('), p.Star(p.Ref("c-wsp")), p.Ref("alternation"), p.Star(p.Ref("c-wsp")), p.Lit(')')),
	"option":        p.Cat(p.Lit('['), p.Star(p.Ref("c-wsp")), p.Ref("alternation"), p.Star(p.Ref("c-wsp")), p.Lit(']')),
	"char-val":      p.Cat(p.DQUOTE, p.Star(p.Alt(p.HexRange(0x20, 0x21), p.HexRange(0x23, 0x7e))), p.DQUOTE),
	"num-val":       p.Cat(p.Lit('%'), p.Alt(p.Ref("bin-val"), p.Ref("dec-val"), p.Ref("hex-val"))),
	"bin-val":       p.Cat(p.Lit('b'), p.Plus(p.BIT), p.Opt(p.Alt(p.Plus(p.Cat(p.Lit('.'), p.Plus(p.BIT))), p.Cat(p.Lit('-'), p.Plus(p.BIT))))),
	"dec-val":       p.Cat(p.Lit('d'), p.Plus(p.DIGIT), p.Opt(p.Alt(p.Plus(p.Cat(p.Lit('.'), p.Plus(p.DIGIT))), p.Cat(p.Lit('-'), p.Plus(p.DIGIT))))),
	"hex-val":       p.Cat(p.Lit('x'), p.Plus(p.HEXDIG), p.Opt(p.Alt(p.Plus(p.Cat(p.Lit('.'), p.Plus(p.HEXDIG))), p.Cat(p.Lit('-'), p.Plus(p.HEXDIG))))),
	"prose-val":     p.Cat(p.Lit('<'), p.Star(p.Alt(p.HexRange(0x20, 0x3d), p.HexRange(0x3f, 0x7e))), p.Lit('>')),
}
