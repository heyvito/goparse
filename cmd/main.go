package main

import (
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"

	"github.com/urfave/cli/v2"

	"github.com/heyvito/goparse/abnf"
	"github.com/heyvito/goparse/abnf2"
)

func genOutput(pkg, output string) (string, error) {
	src := strings.Join([]string{
		"// Code generated by goparse. DO NOT EDIT.",
		"",
		"package " + pkg,
		"",
		"import p \"github.com/heyvito/goparse/parser\"",
		"",
		output,
	}, "\n")

	p, err := format.Source([]byte(src))
	if err != nil {
		return "", err
	}

	return string(p), nil
}

func main() {
	app := &cli.App{
		Name:  "goparse",
		Usage: "generates parsers from ABNF/EDL rules",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "format",
				Aliases: []string{"f"},
				Usage:   "Instructs the parser to use the provided grammar to parse input data (ABNF/EDL)",
				Value:   "abnf",
			},
			&cli.StringFlag{
				Name:     "package",
				Aliases:  []string{"p"},
				Usage:    "Go package name to use when generating output file",
				Required: true,
				Value:    "abnf",
			},
		},
		ArgsUsage: "INPUT OUTPUT",
		Action: func(c *cli.Context) error {
			if c.NArg() != 2 {
				fmt.Println("Invalid input arguments.\nUsage: goparse -p PACKAGE-NAME INPUT OUTPUT")
				os.Exit(1)
			}

			pkg := c.String("package")
			inputFormat := strings.ToLower(c.String("format"))
			input := c.Args().First()
			if inputFormat != "abnf" && inputFormat != "edl" {
				fmt.Println("Invalid format.\nFormats available: abnf, edl")
				os.Exit(1)
			}

			// For now we don't really care about EDL...
			inputBytes, err := os.ReadFile(input)
			if err != nil {
				fmt.Printf("Error reading %s: %s\n", input, err)
				os.Exit(1)
			}

			rules, err := abnf2.Parse(string(inputBytes))
			if err != nil {
				fmt.Printf("Error parsing %s:\n    %s", input, err)
			}

			output, err := genOutput(pkg, abnf.Generate(rules))
			if err != nil {
				fmt.Printf("Error generating sources: %s\nThis is probably a bug. Please report it to https://github.com/heyvito/goparse/issues/new\n", err)
				os.Exit(1)
			}

			outFile := c.Args().Get(1)
			err = os.WriteFile(outFile, []byte(output), os.ModePerm)
			if err != nil {
				fmt.Printf("Error writing %s: %s\n", outFile, err)
			}

			return nil
		},
	}

	err := app.Run(os.Args)
	if err != nil {
		log.Fatal(err)
	}
}
